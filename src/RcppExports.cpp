// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "phasic_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_graph
SEXP create_graph(size_t state_length);
RcppExport SEXP _phasic_create_graph(SEXP state_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type state_length(state_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(create_graph(state_length));
    return rcpp_result_gen;
END_RCPP
}
// find_or_create_vertex
List find_or_create_vertex(SEXP phase_type_graph, IntegerVector state);
RcppExport SEXP _phasic_find_or_create_vertex(SEXP phase_type_graphSEXP, SEXP stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type state(stateSEXP);
    rcpp_result_gen = Rcpp::wrap(find_or_create_vertex(phase_type_graph, state));
    return rcpp_result_gen;
END_RCPP
}
// add_edge
void add_edge(SEXP phase_type_vertex_from, SEXP phase_type_vertex_to, double weight, NumericVector parameterized_edge_state);
RcppExport SEXP _phasic_add_edge(SEXP phase_type_vertex_fromSEXP, SEXP phase_type_vertex_toSEXP, SEXP weightSEXP, SEXP parameterized_edge_stateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_vertex_from(phase_type_vertex_fromSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_vertex_to(phase_type_vertex_toSEXP);
    Rcpp::traits::input_parameter< double >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameterized_edge_state(parameterized_edge_stateSEXP);
    add_edge(phase_type_vertex_from, phase_type_vertex_to, weight, parameterized_edge_state);
    return R_NilValue;
END_RCPP
}
// graph_update_weights_parameterized
void graph_update_weights_parameterized(SEXP phase_type_graph, NumericVector scalars);
RcppExport SEXP _phasic_graph_update_weights_parameterized(SEXP phase_type_graphSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scalars(scalarsSEXP);
    graph_update_weights_parameterized(phase_type_graph, scalars);
    return R_NilValue;
END_RCPP
}
// vertices
List vertices(SEXP phase_type_graph);
RcppExport SEXP _phasic_vertices(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(vertices(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// states
IntegerMatrix states(SEXP phase_type_graph);
RcppExport SEXP _phasic_states(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(states(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// vertices_length
int vertices_length(SEXP phase_type_graph);
RcppExport SEXP _phasic_vertices_length(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(vertices_length(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// vertex_at
List vertex_at(SEXP phase_type_graph, int index);
RcppExport SEXP _phasic_vertex_at(SEXP phase_type_graphSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vertex_at(phase_type_graph, index));
    return rcpp_result_gen;
END_RCPP
}
// starting_vertex
List starting_vertex(SEXP phase_type_graph);
RcppExport SEXP _phasic_starting_vertex(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(starting_vertex(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// edges
List edges(SEXP phase_type_vertex);
RcppExport SEXP _phasic_edges(SEXP phase_type_vertexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_vertex(phase_type_vertexSEXP);
    rcpp_result_gen = Rcpp::wrap(edges(phase_type_vertex));
    return rcpp_result_gen;
END_RCPP
}
// create_vertex
SEXP create_vertex(SEXP phase_type_graph, IntegerVector state);
RcppExport SEXP _phasic_create_vertex(SEXP phase_type_graphSEXP, SEXP stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type state(stateSEXP);
    rcpp_result_gen = Rcpp::wrap(create_vertex(phase_type_graph, state));
    return rcpp_result_gen;
END_RCPP
}
// find_vertex
SEXP find_vertex(SEXP phase_type_graph, IntegerVector state);
RcppExport SEXP _phasic_find_vertex(SEXP phase_type_graphSEXP, SEXP stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type state(stateSEXP);
    rcpp_result_gen = Rcpp::wrap(find_vertex(phase_type_graph, state));
    return rcpp_result_gen;
END_RCPP
}
// graph_as_matrix
List graph_as_matrix(SEXP phase_type_graph);
RcppExport SEXP _phasic_graph_as_matrix(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_as_matrix(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// matrix_as_graph
SEXP matrix_as_graph(NumericVector IPV, NumericMatrix SIM, Nullable <NumericMatrix> rewards);
RcppExport SEXP _phasic_matrix_as_graph(SEXP IPVSEXP, SEXP SIMSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type IPV(IPVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type SIM(SIMSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericMatrix> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_as_graph(IPV, SIM, rewards));
    return rcpp_result_gen;
END_RCPP
}
// clone_graph
SEXP clone_graph(SEXP phase_type_graph);
RcppExport SEXP _phasic_clone_graph(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(clone_graph(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// graph_as_dph_matrix
List graph_as_dph_matrix(SEXP phase_type_graph);
RcppExport SEXP _phasic_graph_as_dph_matrix(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_as_dph_matrix(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// // expectation_dag
// SEXP expectation_dag(SEXP phase_type_graph, Nullable <NumericVector> rewards);
// RcppExport SEXP _phasic_expectation_dag(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
// BEGIN_RCPP
//     Rcpp::RObject rcpp_result_gen;
//     Rcpp::RNGScope rcpp_rngScope_gen;
//     Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
//     Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
//     rcpp_result_gen = Rcpp::wrap(expectation_dag(phase_type_graph, rewards));
//     return rcpp_result_gen;
// END_RCPP
// }
// reward_transform
SEXP reward_transform(SEXP phase_type_graph, NumericVector rewards);
RcppExport SEXP _phasic_reward_transform(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(reward_transform(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// dph_reward_transform
SEXP dph_reward_transform(SEXP phase_type_graph, IntegerVector rewards);
RcppExport SEXP _phasic_dph_reward_transform(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_reward_transform(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// normalize_graph
NumericVector normalize_graph(SEXP phase_type_graph);
RcppExport SEXP _phasic_normalize_graph(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_graph(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// normalize_dph_graph
NumericVector normalize_dph_graph(SEXP phase_type_graph);
RcppExport SEXP _phasic_normalize_dph_graph(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_dph_graph(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// expected_waiting_time
NumericVector expected_waiting_time(SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_expected_waiting_time(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_waiting_time(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// expected_residence_time
NumericVector expected_residence_time(SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_expected_residence_time(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_residence_time(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// dph_expected_visits
NumericVector dph_expected_visits(SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_dph_expected_visits(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_expected_visits(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// moments
NumericVector moments(SEXP phase_type_graph, int power, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_moments(SEXP phase_type_graphSEXP, SEXP powerSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< int >::type power(powerSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(moments(phase_type_graph, power, rewards));
    return rcpp_result_gen;
END_RCPP
}
// expectation
double expectation(SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_expectation(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(expectation(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// variance
double variance(SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_variance(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(variance(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// covariance
double covariance(SEXP phase_type_graph, NumericVector rewards1, NumericVector rewards2);
RcppExport SEXP _phasic_covariance(SEXP phase_type_graphSEXP, SEXP rewards1SEXP, SEXP rewards2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rewards1(rewards1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rewards2(rewards2SEXP);
    rcpp_result_gen = Rcpp::wrap(covariance(phase_type_graph, rewards1, rewards2));
    return rcpp_result_gen;
END_RCPP
}
// dph_expectation
double dph_expectation(SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_dph_expectation(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_expectation(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// dph_variance
double dph_variance(SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_dph_variance(SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_variance(phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// dph_covariance
double dph_covariance(SEXP phase_type_graph, NumericVector rewards1, NumericVector rewards2);
RcppExport SEXP _phasic_dph_covariance(SEXP phase_type_graphSEXP, SEXP rewards1SEXP, SEXP rewards2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rewards1(rewards1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rewards2(rewards2SEXP);
    rcpp_result_gen = Rcpp::wrap(dph_covariance(phase_type_graph, rewards1, rewards2));
    return rcpp_result_gen;
END_RCPP
}
// is_graph_acyclic
bool is_graph_acyclic(SEXP phase_type_graph);
RcppExport SEXP _phasic_is_graph_acyclic(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(is_graph_acyclic(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// defect
double defect(SEXP phase_type_graph);
RcppExport SEXP _phasic_defect(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(defect(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// rph
NumericVector rph(int n, SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_rph(SEXP nSEXP, SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(rph(n, phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// dph
NumericVector dph(NumericVector x, SEXP phase_type_graph, int granularity);
RcppExport SEXP _phasic_dph(SEXP xSEXP, SEXP phase_type_graphSEXP, SEXP granularitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< int >::type granularity(granularitySEXP);
    rcpp_result_gen = Rcpp::wrap(dph(x, phase_type_graph, granularity));
    return rcpp_result_gen;
END_RCPP
}
// pph
NumericVector pph(NumericVector q, SEXP phase_type_graph, int granularity);
RcppExport SEXP _phasic_pph(SEXP qSEXP, SEXP phase_type_graphSEXP, SEXP granularitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< int >::type granularity(granularitySEXP);
    rcpp_result_gen = Rcpp::wrap(pph(q, phase_type_graph, granularity));
    return rcpp_result_gen;
END_RCPP
}
// stop_probability
NumericVector stop_probability(SEXP phase_type_graph, double time, int granularity);
RcppExport SEXP _phasic_stop_probability(SEXP phase_type_graphSEXP, SEXP timeSEXP, SEXP granularitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type granularity(granularitySEXP);
    rcpp_result_gen = Rcpp::wrap(stop_probability(phase_type_graph, time, granularity));
    return rcpp_result_gen;
END_RCPP
}
// accumulated_visiting_time
NumericVector accumulated_visiting_time(SEXP phase_type_graph, double time, int granularity);
RcppExport SEXP _phasic_accumulated_visiting_time(SEXP phase_type_graphSEXP, SEXP timeSEXP, SEXP granularitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type granularity(granularitySEXP);
    rcpp_result_gen = Rcpp::wrap(accumulated_visiting_time(phase_type_graph, time, granularity));
    return rcpp_result_gen;
END_RCPP
}
// rmph
NumericMatrix rmph(int n, SEXP phase_type_graph, NumericMatrix rewards);
RcppExport SEXP _phasic_rmph(SEXP nSEXP, SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(rmph(n, phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// random_sample_stop_vertex
NumericVector random_sample_stop_vertex(int n, SEXP phase_type_graph, double time);
RcppExport SEXP _phasic_random_sample_stop_vertex(SEXP nSEXP, SEXP phase_type_graphSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(random_sample_stop_vertex(n, phase_type_graph, time));
    return rcpp_result_gen;
END_RCPP
}
// rdph
NumericVector rdph(int n, SEXP phase_type_graph, Nullable <NumericVector> rewards);
RcppExport SEXP _phasic_rdph(SEXP nSEXP, SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< Nullable <NumericVector> >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(rdph(n, phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// ddph
NumericVector ddph(IntegerVector x, SEXP phase_type_graph);
RcppExport SEXP _phasic_ddph(SEXP xSEXP, SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(ddph(x, phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// pdph
NumericVector pdph(IntegerVector q, SEXP phase_type_graph);
RcppExport SEXP _phasic_pdph(SEXP qSEXP, SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(pdph(q, phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// dph_stop_probability
NumericVector dph_stop_probability(SEXP phase_type_graph, int jumps);
RcppExport SEXP _phasic_dph_stop_probability(SEXP phase_type_graphSEXP, SEXP jumpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< int >::type jumps(jumpsSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_stop_probability(phase_type_graph, jumps));
    return rcpp_result_gen;
END_RCPP
}
// dph_accumulated_visits
NumericVector dph_accumulated_visits(SEXP phase_type_graph, int jumps);
RcppExport SEXP _phasic_dph_accumulated_visits(SEXP phase_type_graphSEXP, SEXP jumpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< int >::type jumps(jumpsSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_accumulated_visits(phase_type_graph, jumps));
    return rcpp_result_gen;
END_RCPP
}
// rmdph
NumericMatrix rmdph(int n, SEXP phase_type_graph, NumericMatrix rewards);
RcppExport SEXP _phasic_rmdph(SEXP nSEXP, SEXP phase_type_graphSEXP, SEXP rewardsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rewards(rewardsSEXP);
    rcpp_result_gen = Rcpp::wrap(rmdph(n, phase_type_graph, rewards));
    return rcpp_result_gen;
END_RCPP
}
// dph_random_sample_stop_vertex
NumericVector dph_random_sample_stop_vertex(int n, SEXP phase_type_graph, int jumps);
RcppExport SEXP _phasic_dph_random_sample_stop_vertex(SEXP nSEXP, SEXP phase_type_graphSEXP, SEXP jumpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< int >::type jumps(jumpsSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_random_sample_stop_vertex(n, phase_type_graph, jumps));
    return rcpp_result_gen;
END_RCPP
}
// distribution_context
SEXP distribution_context(SEXP phase_type_graph, int granularity);
RcppExport SEXP _phasic_distribution_context(SEXP phase_type_graphSEXP, SEXP granularitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    Rcpp::traits::input_parameter< int >::type granularity(granularitySEXP);
    rcpp_result_gen = Rcpp::wrap(distribution_context(phase_type_graph, granularity));
    return rcpp_result_gen;
END_RCPP
}
// distribution_context_step
void distribution_context_step(SEXP probability_distribution_context);
RcppExport SEXP _phasic_distribution_context_step(SEXP probability_distribution_contextSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type probability_distribution_context(probability_distribution_contextSEXP);
    distribution_context_step(probability_distribution_context);
    return R_NilValue;
END_RCPP
}
// distribution_context_state
List distribution_context_state(SEXP probability_distribution_context);
RcppExport SEXP _phasic_distribution_context_state(SEXP probability_distribution_contextSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type probability_distribution_context(probability_distribution_contextSEXP);
    rcpp_result_gen = Rcpp::wrap(distribution_context_state(probability_distribution_context));
    return rcpp_result_gen;
END_RCPP
}
// distribution_context_stop_probability
NumericVector distribution_context_stop_probability(SEXP probability_distribution_context);
RcppExport SEXP _phasic_distribution_context_stop_probability(SEXP probability_distribution_contextSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type probability_distribution_context(probability_distribution_contextSEXP);
    rcpp_result_gen = Rcpp::wrap(distribution_context_stop_probability(probability_distribution_context));
    return rcpp_result_gen;
END_RCPP
}
// distribution_context_accumulated_visiting_time
NumericVector distribution_context_accumulated_visiting_time(SEXP probability_distribution_context);
RcppExport SEXP _phasic_distribution_context_accumulated_visiting_time(SEXP probability_distribution_contextSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type probability_distribution_context(probability_distribution_contextSEXP);
    rcpp_result_gen = Rcpp::wrap(distribution_context_accumulated_visiting_time(probability_distribution_context));
    return rcpp_result_gen;
END_RCPP
}
// dph_distribution_context
SEXP dph_distribution_context(SEXP phase_type_graph);
RcppExport SEXP _phasic_dph_distribution_context(SEXP phase_type_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type phase_type_graph(phase_type_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_distribution_context(phase_type_graph));
    return rcpp_result_gen;
END_RCPP
}
// dph_distribution_context_step
void dph_distribution_context_step(SEXP probability_distribution_context);
RcppExport SEXP _phasic_dph_distribution_context_step(SEXP probability_distribution_contextSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type probability_distribution_context(probability_distribution_contextSEXP);
    dph_distribution_context_step(probability_distribution_context);
    return R_NilValue;
END_RCPP
}
// dph_distribution_context_state
List dph_distribution_context_state(SEXP probability_distribution_context);
RcppExport SEXP _phasic_dph_distribution_context_state(SEXP probability_distribution_contextSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type probability_distribution_context(probability_distribution_contextSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_distribution_context_state(probability_distribution_context));
    return rcpp_result_gen;
END_RCPP
}
// dph_distribution_context_stop_probability
NumericVector dph_distribution_context_stop_probability(SEXP probability_distribution_context);
RcppExport SEXP _phasic_dph_distribution_context_stop_probability(SEXP probability_distribution_contextSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type probability_distribution_context(probability_distribution_contextSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_distribution_context_stop_probability(probability_distribution_context));
    return rcpp_result_gen;
END_RCPP
}
// dph_distribution_context_accumulated_visits
NumericVector dph_distribution_context_accumulated_visits(SEXP probability_distribution_context);
RcppExport SEXP _phasic_dph_distribution_context_accumulated_visits(SEXP probability_distribution_contextSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type probability_distribution_context(probability_distribution_contextSEXP);
    rcpp_result_gen = Rcpp::wrap(dph_distribution_context_accumulated_visits(probability_distribution_context));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phasic_create_graph", (DL_FUNC) &_phasic_create_graph, 1},
    {"_phasic_find_or_create_vertex", (DL_FUNC) &_phasic_find_or_create_vertex, 2},
    {"_phasic_add_edge", (DL_FUNC) &_phasic_add_edge, 4},
    {"_phasic_graph_update_weights_parameterized", (DL_FUNC) &_phasic_graph_update_weights_parameterized, 2},
    {"_phasic_vertices", (DL_FUNC) &_phasic_vertices, 1},
    {"_phasic_states", (DL_FUNC) &_phasic_states, 1},
    {"_phasic_vertices_length", (DL_FUNC) &_phasic_vertices_length, 1},
    {"_phasic_vertex_at", (DL_FUNC) &_phasic_vertex_at, 2},
    {"_phasic_starting_vertex", (DL_FUNC) &_phasic_starting_vertex, 1},
    {"_phasic_edges", (DL_FUNC) &_phasic_edges, 1},
    {"_phasic_create_vertex", (DL_FUNC) &_phasic_create_vertex, 2},
    {"_phasic_find_vertex", (DL_FUNC) &_phasic_find_vertex, 2},
    {"_phasic_graph_as_matrix", (DL_FUNC) &_phasic_graph_as_matrix, 1},
    {"_phasic_matrix_as_graph", (DL_FUNC) &_phasic_matrix_as_graph, 3},
    {"_phasic_clone_graph", (DL_FUNC) &_phasic_clone_graph, 1},
    {"_phasic_graph_as_dph_matrix", (DL_FUNC) &_phasic_graph_as_dph_matrix, 1},
    // {"_phasic_expectation_dag", (DL_FUNC) &_phasic_expectation_dag, 2},
    {"_phasic_reward_transform", (DL_FUNC) &_phasic_reward_transform, 2},
    {"_phasic_dph_reward_transform", (DL_FUNC) &_phasic_dph_reward_transform, 2},
    {"_phasic_normalize_graph", (DL_FUNC) &_phasic_normalize_graph, 1},
    {"_phasic_normalize_dph_graph", (DL_FUNC) &_phasic_normalize_dph_graph, 1},
    {"_phasic_expected_waiting_time", (DL_FUNC) &_phasic_expected_waiting_time, 2},
    {"_phasic_expected_residence_time", (DL_FUNC) &_phasic_expected_residence_time, 2},
    {"_phasic_dph_expected_visits", (DL_FUNC) &_phasic_dph_expected_visits, 2},
    {"_phasic_moments", (DL_FUNC) &_phasic_moments, 3},
    {"_phasic_expectation", (DL_FUNC) &_phasic_expectation, 2},
    {"_phasic_variance", (DL_FUNC) &_phasic_variance, 2},
    {"_phasic_covariance", (DL_FUNC) &_phasic_covariance, 3},
    {"_phasic_dph_expectation", (DL_FUNC) &_phasic_dph_expectation, 2},
    {"_phasic_dph_variance", (DL_FUNC) &_phasic_dph_variance, 2},
    {"_phasic_dph_covariance", (DL_FUNC) &_phasic_dph_covariance, 3},
    {"_phasic_is_graph_acyclic", (DL_FUNC) &_phasic_is_graph_acyclic, 1},
    {"_phasic_defect", (DL_FUNC) &_phasic_defect, 1},
    {"_phasic_rph", (DL_FUNC) &_phasic_rph, 3},
    {"_phasic_dph", (DL_FUNC) &_phasic_dph, 3},
    {"_phasic_pph", (DL_FUNC) &_phasic_pph, 3},
    {"_phasic_stop_probability", (DL_FUNC) &_phasic_stop_probability, 3},
    {"_phasic_accumulated_visiting_time", (DL_FUNC) &_phasic_accumulated_visiting_time, 3},
    {"_phasic_rmph", (DL_FUNC) &_phasic_rmph, 3},
    {"_phasic_random_sample_stop_vertex", (DL_FUNC) &_phasic_random_sample_stop_vertex, 3},
    {"_phasic_rdph", (DL_FUNC) &_phasic_rdph, 3},
    {"_phasic_ddph", (DL_FUNC) &_phasic_ddph, 2},
    {"_phasic_pdph", (DL_FUNC) &_phasic_pdph, 2},
    {"_phasic_dph_stop_probability", (DL_FUNC) &_phasic_dph_stop_probability, 2},
    {"_phasic_dph_accumulated_visits", (DL_FUNC) &_phasic_dph_accumulated_visits, 2},
    {"_phasic_rmdph", (DL_FUNC) &_phasic_rmdph, 3},
    {"_phasic_dph_random_sample_stop_vertex", (DL_FUNC) &_phasic_dph_random_sample_stop_vertex, 3},
    {"_phasic_distribution_context", (DL_FUNC) &_phasic_distribution_context, 2},
    {"_phasic_distribution_context_step", (DL_FUNC) &_phasic_distribution_context_step, 1},
    {"_phasic_distribution_context_state", (DL_FUNC) &_phasic_distribution_context_state, 1},
    {"_phasic_distribution_context_stop_probability", (DL_FUNC) &_phasic_distribution_context_stop_probability, 1},
    {"_phasic_distribution_context_accumulated_visiting_time", (DL_FUNC) &_phasic_distribution_context_accumulated_visiting_time, 1},
    {"_phasic_dph_distribution_context", (DL_FUNC) &_phasic_dph_distribution_context, 1},
    {"_phasic_dph_distribution_context_step", (DL_FUNC) &_phasic_dph_distribution_context_step, 1},
    {"_phasic_dph_distribution_context_state", (DL_FUNC) &_phasic_dph_distribution_context_state, 1},
    {"_phasic_dph_distribution_context_stop_probability", (DL_FUNC) &_phasic_dph_distribution_context_stop_probability, 1},
    {"_phasic_dph_distribution_context_accumulated_visits", (DL_FUNC) &_phasic_dph_distribution_context_accumulated_visits, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_phasic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
