
# [build-system]
# requires = ["setuptools >= 77.0.3", "pybind11>=2.10.0", "eigen"]
# build-backend = "setuptools.build_meta"
[build-system]
requires = ["setuptools", "wheel", "scikit-build-core", "pybind11>=2.10.0", "eigen"]
build-backend = "scikit_build_core.build"

[project]
name = "ptdalgorithms"
version = "0.20.8"
classifiers = [
  "Development Status :: 5 - Beta",
  "Intended Audience :: Education",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
requires-python = ">= 3.9"
dependencies = [
  'pybind11>=2.10.0',
  'numpy',
  'eigen',
  'ipython',
  'graphviz',
  'seaborn',
  'pyyaml',
  'psutil',
  'rich',
  'tqdm',
]
authors = [
  # {name = "Tobias RÃ¸ikjer", email = ""},
  {name = "Kasper Munch", email = "kaspermunch@birc.au.dk"},
]
maintainers = [
  {name = "Kasper Munch", email = "kaspermunch@birc.au.dk"},
]
description = ""
keywords = ["",]
readme = "README.md"
license = {file = "LICENSE.txt"}

[project.optional-dependencies]
jax = [
  'jax>=0.4.0',
#  'jaxlib',
]
dev = [
    "pytest",
    "tszip>=0.2.5",
]
# docs = [
#     "sphinx",
#     "sphinx-rtd-theme",
# ]

[project.urls]
Homepage = "https://munch-group.org/PtDAlgorithms]"
Documentation = "https://munch-group.org/PtDAlgorithms"
Repository = "https://github.com/munch-group/ptdalgorithms.git"
Issues = "https://github.com/munch-group/ptdalgorithms/issues"

[tool.setuptools.packages.find]
where = ["src"]  # list of folders that contain the packages (["."] by default)
include = ["ptdalgorithms*"]  # package names should match these glob patterns (["*"] by default)
# exclude = ["my_package.tests*"]  # exclude packages matching these glob patterns (empty by default)
namespaces = false  # to disable scanning PEP 420 namespaces (true by default)


#pip install -e . --no-deps --force-reinstall



[tool.pixi.workspace]
channels = ["conda-forge", "munch-group"]
platforms = ["osx-arm64", "linux-64"]

[tool.pixi.dependencies]
python = ">=3.9,<3.14"
git = ">=2.51.0,<3"
gh = ">=2.81.0,<3"
quartodoc = "*"
pip = "*"
cmake = ">=4.1.2,<5"
eigen = ">=3.4.0,<4"
nlohmann_json = ">=3.11.0"
ipykernel = ">=6.30.1,<7"

# [tool.pixi.pypi-dependencies]


[tool.pixi.environments]
default = {solve-group = "default"}

[tool.pixi.tasks.git-remove-untracked]
cmd = "git clean -fd"
description = "Removes untracked files and directories but respects your .gitignores"

# [tool.pixi.tasks.test]
# cmd = "python -m unittest"
# description = "Run tests"

 # setup-kernel = "python -m ipykernel install --user --name franklin --display-name 'Franklin Python'"
# quarto-render = { cmd = "quarto render", env = { QUARTO_PYTHON = ".pixi/envs/default/bin/python" } }

[tool.pixi.tasks.bump-version]
args = [
  { "arg" = "kind", "default" = "patch" },  # can be patch, minor, major
  { "arg" = "flag", "default" = "" },     # can be --pre, --release
]
cmd = "./.scripts/bump_version.py --{{ kind }} {{ flag }} &&  git add -u &&  git commit -m '{{ kind }} {{ flag }} version bump' && git push" 
description = "Bump version patch and build/release conda packages"

[tool.pixi.tasks.bump-changelog]
cmd = "./.scripts/bump_changelog.py --yes"
description = "Bump version patch and build/release conda packages"

[tool.pixi.tasks.acp]
args = [
  { "arg" = "message", "default" = "update" },  # can be --patch, --minor, --major
]
cmd = "git add -u ; git commit -m '{{ message }}' ; git push"
description = "git add commit push of tracked files with optional message"

[tool.pixi.tasks.github-release]
cmd = "./.scripts/release-tag.sh"
description = "Release latest version on Github"

